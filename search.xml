<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PG库分表</title>
      <link href="/blog/2020/11/27/PG%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/blog/2020/11/27/PG%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>记录一下PG库分表实践</p><a id="more"></a><p>先上文档 <a href="http://www.postgres.cn/docs/10/ddl-partitioning.html">http://www.postgres.cn/docs/10/ddl-partitioning.html</a></p><p>简单贴一下PG分区表的概念特点</p><p>pg本身的分区表功能，支持基本的表划分，划分值将逻辑上的一个大表分成一些小的物理上的片，优势如下：</p><ul><li>在某些情况下查询性能能够显著提升，特别是当那些访问压力大的行在一个分区或者少数几个分区时。划分可以取代索引的主导列、减小索引尺寸以及使索引中访问压力大的部分更有可能被放在内存中。</li><li>当查询或更新访问一个分区的大部分行时，可以通过该分区上的一个顺序扫描来取代分散到整个表上的索引和随机访问，这样可以改善性能。</li><li>如果需求计划使用划分设计，可以通过增加或移除分区来完成批量载入和删除。 执行<code>ALTER TABLE DETACH PARTITION</code>或者使用<code>DROP TABLE</code> 删除一个单独的分区都远快于一个批量操作。这些命令也完全避免了由批量<code>DELETE</code>造成的<code>VACUUM</code>负载。</li><li>很少使用的数据可以被迁移到便宜且较慢的存储介质上。</li></ul><p>当一个表非常大时，划分所带来的好处是非常值得的。一个表何种情况下会从划分获益取决于应用，一个经验法则是当表的尺寸超过了数据库服务器物理内存时，划分会为表带来好处。</p><p>PG支持两种分区方式：</p><ol><li><p>声明式</p></li><li><p>继承式</p></li></ol><hr><p>本次记录一下继承方式的分区方法。</p><p>继承的特点：</p><ul><li>分区强制执行一条规则，即所有分区必须与父表具有完全相同的一组列， 但表继承允许子表具有不在父表中的额外列。</li><li>表继承允许多重继承。</li><li>声明式分区仅支持列表和范围分区，而表继承允许按照用户选择的方式分割数据。 （但是，请注意，如果约束排除无法有效地修剪分区，查询性能将会很差。）</li><li>有些操作在使用声明式分区时需要比使用表继承时更强的锁定。例如， 向分区表添加或删除分区需要在父表上使用<code>ACCESS EXCLUSIVE</code>锁， 而在普通继承的情况下<code>SHARE UPDATE EXCLUSIVE</code>锁就足够了。</li></ul><p>实践开始</p><h5 id="创建主表"><a href="#创建主表" class="headerlink" title="创建主表"></a>创建主表</h5><p>所有的分区都将继承主表。 这个表将不会包含任何数据。不要在这个表上定义任何检查约束， 除非准备将它们应用到所有分区。同样也不需要定义任何索引或者唯一约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student (</span><br><span class="line">&quot;id&quot; VARCHAR(10) not null,</span><br><span class="line">&quot;name&quot; VARCHAR(20) not null,</span><br><span class="line">&quot;age&quot; int4,</span><br><span class="line">&quot;class&quot; VARCHAR(10)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="创建分区表"><a href="#创建分区表" class="headerlink" title="创建分区表"></a>创建分区表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student_1 (CHECK (&quot;class&quot; &#x3D; &#39;1&#39;)) INHERITS (student);</span><br><span class="line">CREATE TABLE student_2 (CHECK (&quot;class&quot; &#x3D; &#39;2&#39;)) INHERITS (student);</span><br></pre></td></tr></table></figure><p>注：确保每个分区表的CHECK约束没有重叠，比如<code>class in (&#39;1&#39;,&#39;2&#39;)</code>和<code>class in (&#39;2&#39;,&#39;3&#39;)</code></p><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_student_1_class ON student_1 (&quot;class&quot;);</span><br><span class="line">CREATE INDEX index_student_2_class ON student_2 (&quot;class&quot;);</span><br></pre></td></tr></table></figure><h5 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h5><p>为主表附加一个合适的触发器，能够在insert into student…时将数据重定向到对应的分区表。</p><p>先创建一个函数，每一个IF必须匹配对应分区表的CHECK约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION student_insert_trigger()</span><br><span class="line">RETURNS TRIGGER AS $$</span><br><span class="line">BEGIN</span><br><span class="line">IF (NEW.&quot;class&quot; &#x3D; &#39;1&#39;) THEN</span><br><span class="line">INSERT INTO student_1 VALUES (NEW.*);</span><br><span class="line">ELSEIF (NEW.&quot;class&quot; &#x3D; &#39;2&#39;) THEN</span><br><span class="line">INSERT INTO student_2 VALUES (NEW.*);</span><br><span class="line">ELSE</span><br><span class="line">RAISE EXCEPTION &#39;class out of range&#39;;</span><br><span class="line">END IF;</span><br><span class="line">    RETURN NULL;</span><br><span class="line">END;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br></pre></td></tr></table></figure><p>然后创建一个调用该函数的触发器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER insert_student_trigger</span><br><span class="line">    BEFORE INSERT ON student</span><br><span class="line">    FOR EACH ROW EXECUTE PROCEDURE student_insert_trigger();</span><br></pre></td></tr></table></figure><h5 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student ADD &quot;remark&quot; VARCHAR(255);</span><br></pre></td></tr></table></figure><p>例如增加字段，只需要修改主表即可。</p><p>至此继承方式的分区表创建基本就OK了，可以自行验证一下</p><p>注：主表中是没有数据的<code>SELECT * from only student;</code>，如果insert数据的class字段的值不是1或2，则会抛出触发器函数中的异常<code>class out of range</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PG </tag>
            
            <tag> 分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客</title>
      <link href="/blog/2020/10/20/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/blog/2020/10/20/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>闲来无事，体验一下hexo，在此记录</p><a id="more"></a><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><p>安装</p><p>git <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>node <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 全局安装hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">&#x2F;&#x2F; 自选一个目录，初始化项目，项目名（blog）自定义，</span><br><span class="line">hexo init blog</span><br><span class="line">&#x2F;&#x2F; 进入项目目录</span><br><span class="line">cd blog</span><br><span class="line">&#x2F;&#x2F; 安装依赖</span><br><span class="line">npm install</span><br><span class="line">&#x2F;&#x2F; 启动本地服务，可简写hexo s</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>然后在浏览器输入localhost:4000即可</p><h3 id="GitHub准备"><a href="#GitHub准备" class="headerlink" title="GitHub准备"></a>GitHub准备</h3><h5 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h5><p>新建一个仓库，名为Github-name.github.io,其中Github-name为GitHub账户名</p><p>然后在Settings中开启GitHub Pages，选择一个分支，save即可</p><p>验证：在Code中新建一个index.html，访问<a href="http://github-name.github.io/">http://Github-name.github.io</a>即可</p><h5 id="设置个性域名（可跳过）"><a href="#设置个性域名（可跳过）" class="headerlink" title="设置个性域名（可跳过）"></a>设置个性域名（可跳过）</h5><p>注册域名，写入仓库–&gt;Settings–&gt;GitHub Pages–&gt;Custom domain中</p><p>可同时开启https，搞个免费的DV证书绑定到申请的域名即可</p><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><h5 id="修改项目配置"><a href="#修改项目配置" class="headerlink" title="修改项目配置"></a>修改项目配置</h5><p>在项目blog目录中找到_config.yml文件，找到<code>deploy</code>修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;github账户名&#x2F;仓库名.git&#x2F;&#x2F; 可在GitHub仓库中找到并复制</span><br><span class="line">  branch: master&#x2F;&#x2F;项目发布后在GitHub Pages中修改为此处的分支</span><br></pre></td></tr></table></figure><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>需要先安装一个推送工具</p><p><code>npm install hexo-deployer-git --save</code></p><p>next</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 清缓存</span><br><span class="line">hexo clean</span><br><span class="line">&#x2F;&#x2F; 发布，可简写hexo d，发布过程中需要填写下GitHub的用户名密码</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>访问<a href="http://github-name.github.io/">http://Github-name.github.io</a>，如果配置了custom domain，会指向自定义域名</p><p>至此基本流程OK</p><h3 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h3><p>在项目目录下执行</p><p><code>hexo new post title </code></p><p>然后在source目录找到title.md即可编辑，此处了解下markdown</p><p>编辑完成后发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#x2F;&#x2F; hexo g为generate，意为生成文件</span><br></pre></td></tr></table></figure><hr><p>done</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker mysql</title>
      <link href="/blog/2020/10/15/docker-mysql-remark/"/>
      <url>/blog/2020/10/15/docker-mysql-remark/</url>
      
        <content type="html"><![CDATA[<p>docker安装MySQL备忘录</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker exec -it 容器id bash</span><br><span class="line"># date</span><br><span class="line"># ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br><span class="line">退出重启docker</span><br><span class="line"># exit</span><br><span class="line"># docker restart 容器id</span><br></pre></td></tr></table></figure><hr><img src="https://cdn.jsdelivr.net/gh/zacharycare/imgBed@main/微信图片_20200819144722.png" style="width:100%" />]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
